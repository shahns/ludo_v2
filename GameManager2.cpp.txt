/*
 * GameManager.cpp
 *
 *  Created on: Jan 30, 2019
 *      Author: vishwajit
 */

#include <GameManager.h>

#include "GameManager.h"
#include "Board.h"
#include "GoTPlayer.h"
#include "UIManager.h"
#include <cstdlib>
#include <ctime>
#include <stdlib.h>
#include <string.h>
#include <vector>

void GameManager::playerFactory(std::vector<std::vector<Player*>> players) {

	for (int i = 0; i < Number_of_Players; i++) {

		//todo remove this loadTexture thingie with possibly to render it dirctly using a field
		//rather than getting texture for each player
		//const int gpMoves[][58]

		std::vector<Player*> tPlayer;
		if (gameType == _GOT) {
			//todo remove this hardcoded 4
			for (int j = 0; j < 4; ++j) {
				//todo change defualt player types from i and j to choice
				tPlayer.push_back(new GoTPlayer(i, j));
			}

		} else {
			//todo remove this hardcoded 4
			for (int j = 0; j < 4; ++j) {
				//todo change to store object pointer instead
				tPlayer.push_back(new Player(i, j));
			}
		}
		players.push_back(tPlayer);
	}
}

//TODO remove these variables
std::vector<GoTPlayer *> vectorRedPlayer, vectorBluePlayer, vectorYellowPlayer,
		vectorGreenPlayer;
bool allowHouseSpecialPowerUsage = false;
bool allowOwnSpecialPowerUsage = false;
bool isPlayerSelectionAllowedPower = false;

GameManager::GameManager() :
		UI() { // @suppress("Class members should be properly initialized")

	gameFlags = FLAGS::DEFAULT;
	whoseChance = 1;
	isRedActive = isGreenActive = isYellowActive = isBlueActive = true;
	isMovementAllowed = false;
	isDieThrowAllowed = true;
	//TODO why this string defination is required?
	moveInfoText = "Press 1, 2, 3, 4 to move your token";
	rollInfoText = "Press R to roll a die";
	rulesInfoText = "Press S to see rules";
}
GameManager::~GameManager() {
}

void GameManager::handleEvents() {
	SDL_Event event;

	while (SDL_PollEvent(&event) != 0) {
		// User requests quit
		if (event.type == SDL_QUIT) {
			UI.clean();
			isRunning = false;
		}
		// User presses a key
		else if (event.type == SDL_KEYDOWN) {
			// Select surfaces based on key press
			switch (event.key.keysym.sym) {
			// roll die
			case SDLK_r:
				cout<< "[GAME_MANAGER]: AllowDieThrow: "
				<< isDieThrowAllowed << endl;
				if (isDieThrowAllowed &&
						gameFlags != FLAGS::ASK_TO_USE_HOUSE_POWER &&
						gameFlags != FLAGS::ASK_TO_USE_TOKEN_POWER) {
					gameFlags = FLAGS::ROLL_DIE;
					if (whoseChance != 0) {
						srand(rand() ^ time(NULL));
						dieFace = rand() % 6 + 1;
						whoseChance = validateMyTurn(whoseChance);
						setTurnText(whoseChance);
						isDieThrowAllowed = false;
						isMovementAllowed = true;
					} else {
						whoseChance = 0;
						isMovementAllowed = false;
					}
				} else {
					UI.showPopupMessage("Error!", movementError.c_str());
				}
				break;

				case SDLK_s:
				UI.showRules(gameType);
				break;

				case SDLK_y:
				if (gameType == _GOT && !isMovementAllowed &&
						allowHouseSpecialPowerUsage) {
					int turn = 0;
					if (whoseChance - 1 == 0) {
						turn = 4;
					} else {
						turn = whoseChance - 1;
					}
					if (dieFace != 6) {
						if (turn == 1) {
							if (vectorRedPlayer[0]
									->getHouseSpecialPowerUsedStatus()) {
								UI.showPopupMessage(
										"Error", powerAlreadyUsedError.c_str());
							} else {
								housePower(1);
								setAllHousePowers(vectorRedPlayer, true);
							}
						} else if (turn == 2) {
							if (vectorBluePlayer[0]
									->getHouseSpecialPowerUsedStatus()) {
								UI.showPopupMessage(
										"Error", powerAlreadyUsedError.c_str());
							} else {
								housePower(2);
								setAllHousePowers(vectorBluePlayer, true);
							}
						} else if (turn == 3) {
							if (vectorYellowPlayer[0]
									->getHouseSpecialPowerUsedStatus()) {
								UI.showPopupMessage(
										"Error", powerAlreadyUsedError.c_str());
							} else {
								housePower(3);
								setAllHousePowers(vectorYellowPlayer, true);
							}
						} else if (turn == 4) {
							if (vectorGreenPlayer[0]
									->getHouseSpecialPowerUsedStatus()) {
								UI.showPopupMessage(
										"Error", powerAlreadyUsedError.c_str());
							} else {
								housePower(4);
								setAllHousePowers(vectorGreenPlayer, true);
							}
						}
						isDieThrowAllowed = true;
						//std::string housePowerText = "";
						allowHouseSpecialPowerUsage = false;
						allowOwnSpecialPowerUsage = false;
						gameFlags = FLAGS::DEFAULT;
					} else {
						UI.showPopupMessage("Error", powerError.c_str());
						isDieThrowAllowed = true;
						//housePowerText = " ";
						allowHouseSpecialPowerUsage = false;
						allowOwnSpecialPowerUsage = false;
						gameFlags = FLAGS::DEFAULT;
					}
				} else {
				}
				break;
				case SDLK_n:
				if (gameType == "GoT" && !isMovementAllowed &&
						allowHouseSpecialPowerUsage) {
					isDieThrowAllowed = true;
					allowHouseSpecialPowerUsage = false;
					allowOwnSpecialPowerUsage = false;
					gameFlags = FLAGS::DEFAULT;
				} else {
					UI.showPopupMessage("Error", invalidInputError.c_str());
				}
				break;
				case SDLK_t:
				if (dieFace != 6) {

					if (gameType == "GoT" && !isMovementAllowed &&
							allowOwnSpecialPowerUsage) {
						isPlayerSelectionAllowedPower = true;
					} else {
						UI.showPopupMessage("Error",
								invalidInputError.c_str());
					}
				} else {
					UI.showPopupMessage("Error",
							powerCombinationError.c_str());
					isDieThrowAllowed = true;
					//housePowerText = "";
					allowHouseSpecialPowerUsage = false;
					allowOwnSpecialPowerUsage = false;
					gameFlags = FLAGS::DEFAULT;
				}
				break;
				case SDLK_p:
				if (whoseChance == 4) {
					whoseChance = 1;
				} else {
					whoseChance++;
				}
				if (gameType == "GoT") {
					allowHouseSpecialPowerUsage = false;
					allowOwnSpecialPowerUsage = false;
				}
				GameManager::setTurnText(whoseChance);
				gameFlags = FLAGS::DEFAULT;
				isDieThrowAllowed = true;
				break;
				case SDLK_1: processNumKey(0);
				break;
				case SDLK_2: processNumKey(1);
				break;
				case SDLK_3: processNumKey(2);
				break;
				case SDLK_4: processNumKey(3);
				break;
				case SDLK_6:
				dieFace = 6;
				break;
				default:
				break;
			}
		}
	}
}
//Keynum = actual key -1
void GameManager::processNumKey(uint8_t keyNum) {
	if (!isDieThrowAllowed && gameFlags != FLAGS::ASK_TO_USE_HOUSE_POWER
			&& !allowOwnSpecialPowerUsage) {
		askToMoveWrapper(whoseChance, keyNum, isMovementAllowed);
		if (dieFace == 6) {
		} else {
			whoseChance++;
		}
		if (whoseChance == 5) {
			whoseChance = keyNum;
		}
	} else if (isPlayerSelectionAllowedPower) {
		int turn = 0;
		if (whoseChance - 1 == 0) {
			turn = 4;
		} else {
			turn = whoseChance - 1;
		}

		if (turn == 1
				&& !vectorRedPlayer[keyNum]->getOwnSpecialPowerUsedStatus()) {
			whoseChance = keyNum;
			std::string text = "Extra Chance for Player 1";
			UI.showPopupMessage("Pawn Special Power", text.c_str());
			vectorRedPlayer[keyNum]->setOwnSpecialPowerUsedStatus(true);
		} else if (turn == 2
				&& !vectorBluePlayer[keyNum]->getOwnSpecialPowerUsedStatus()) {
			vectorBluePlayer[keyNum]->incrPosIndex(dieFace, false);
			std::string text = "Token 2 moved ahead by 3 places";
			UI.showPopupMessage("Pawn Special Power", text.c_str());
			vectorBluePlayer[keyNum]->setOwnSpecialPowerUsedStatus(true);
		} else if (turn == 3
				&& !vectorYellowPlayer[keyNum]->getOwnSpecialPowerUsedStatus()) {
			vectorYellowPlayer[keyNum]->incrPosIndex(dieFace, false);
			std::string text = "Token 2 moved ahead by "
					+ std::to_string(dieFace * 2) + "places";
			UI.showPopupMessage("Pawn Special Power", text.c_str());
			vectorYellowPlayer[keyNum]->setOwnSpecialPowerUsedStatus(true);
		} else if (turn == 4
				&& !vectorGreenPlayer[keyNum]->getOwnSpecialPowerUsedStatus()) {
			int oppFace = 7 - dieFace;
			vectorGreenPlayer[keyNum]->incrPosIndex(abs(oppFace - dieFace),
					false);
			std::string text = "Token 2 moved ahead by "
					+ std::to_string(oppFace) + "places";
			UI.showPopupMessage("Pawn Special Power", text.c_str());
			vectorGreenPlayer[keyNum]->setOwnSpecialPowerUsedStatus(true);
		} else {
			UI.showPopupMessage("Error",
					"You have already used your special power.");
		}
		gameFlags = FLAGS::DEFAULT;
		allowOwnSpecialPowerUsage = false;
		allowHouseSpecialPowerUsage = false;
		isDieThrowAllowed = true;
		isPlayerSelectionAllowedPower = false;
		cout<< "[GAME_MANAGER] used special token power"<<endl;
	} else {
		if(keyNum == 0) {

			UI.showPopupMessage("Pawn Special Power",
					invalidInputError.c_str());
		}
		else {
			cout << "[GAME_MANAGER] wrong combination"
			<< endl;
		}
	}
}

void GameManager::initUpdate() {
	auto arrayPlayers = { vectorRedPlayer, vectorBluePlayer, vectorYellowPlayer,
			vectorGreenPlayer };
	for (auto &players : arrayPlayers) {
		int i = 0;
		for (auto &token : players) {
			token->update();
			i++;
		}
	}
	GameManager::setTurnText(whoseChance);
}

void GameManager::gameStatusUpdate() {
	auto arrayPlayers = { vectorRedPlayer, vectorBluePlayer, vectorYellowPlayer,
			vectorGreenPlayer };
	UI.statusUpdate(vectorRedPlayer, vectorBluePlayer, vectorYellowPlayer,
			vectorGreenPlayer);

	switch (gameFlags) {
	case FLAGS::ROLL_DIE:
		UI.setTexture(_DIEFACE, dieFace);
		break;
	case FLAGS::ASK_TO_USE_HOUSE_POWER:
		allowHouseSpecialPowerUsage = true;
		break;
	case FLAGS::ASK_TO_USE_TOKEN_POWER:
		allowOwnSpecialPowerUsage = true;
		break;
	case FLAGS::DEFAULT:
		allowHouseSpecialPowerUsage = false;
		allowOwnSpecialPowerUsage = false;
		break;
	default:
		break;
	}
}
void GameManager::playerStatusUpdate() {
	if (gameType == "GoT") {
		auto arrayPlayers = { vectorRedPlayer, vectorBluePlayer,
				vectorYellowPlayer, vectorGreenPlayer };
		for (auto &players : arrayPlayers) {
			int i = 0;
			for (auto &token : players) {
				token->doHouseKeeping();
				i++;
			}
		}
	}
	if (NorMyAllPlayers(vectorRedPlayer))
		isRedActive = false;
	if (NorMyAllPlayers(vectorBluePlayer))
		isBlueActive = false;
	if (NorMyAllPlayers(vectorYellowPlayer))
		isYellowActive = false;
	if (NorMyAllPlayers(vectorGreenPlayer))
		isGreenActive = false;

	if ((isRedActive + isBlueActive + isYellowActive + isGreenActive) == 1) {
		UI.showPopupMessage("Congratulations!!!",
				"Congratulations!!! Game Finished. Game will be "
						"closed on clicking ok! ");
		UI.clean();
		isRunning = false;
	}
}
const int GameManager::validateMyTurn(int x) const {
	if (x == 1 && isRedActive) {
		return 1;
	} else if (x == 1 && !isRedActive) {
		if (isBlueActive) {
			return 2;
		} else if (isYellowActive) {
			return 3;
		} else if (isGreenActive) {
			return 4;
		}
	} else if (x == 2 && isBlueActive) {
		return 2;
	} else if (x == 2 && !isBlueActive) {
		if (isYellowActive) {
			return 3;
		} else if (isGreenActive) {
			return 4;
		} else if (isRedActive) {
			return 1;
		}
	} else if (x == 3 && isYellowActive) {
		return 3;
	} else if (x == 3 && !isYellowActive) {
		if (isGreenActive) {
			return 4;
		} else if (isRedActive) {
			return 1;
		} else if (isBlueActive) {
			return 2;
		}
	} else if (x == 4 && isGreenActive) {
		return 4;
	} else if (x == 4 && !isGreenActive) {
		if (isRedActive) {
			return 1;
		} else if (isBlueActive) {
			return 2;
		} else if (isYellowActive) {
			return 3;
		}
	} else if (!isRedActive && !isGreenActive && !isBlueActive
			&& !isYellowActive) {
		cout<< "[GAME_MANAGER] Game is finished";
		return -1;
	} else {
		cout << "[GAME_MANAGER] unable to found possible move";
		return 0;
	}
	return -1;
}

void GameManager::askToMoveToken(int playerNum,
		std::vector<GoTPlayer *> playerVector, bool movement) {
	if (gameType == _GOT
			&& !(playerVector[playerNum]->getHouseSpecialPowerUsedStatus()
					&& playerVector[0]->getOwnSpecialPowerUsedStatus()
					&& playerVector[1]->getOwnSpecialPowerUsedStatus()
					&& playerVector[2]->getOwnSpecialPowerUsedStatus()
					&& playerVector[3]->getOwnSpecialPowerUsedStatus())) {
		allowHouseSpecialPowerUsage = true;
		allowOwnSpecialPowerUsage = true;
	}
	playerVector[playerNum]->incrPosIndex(dieFace, false);
	setIsMovementAllowed(false);
	if (gameType == _TRADITIONAL
			|| playerVector[playerNum]->getHouseSpecialPowerUsedStatus()
			|| playerVector[playerNum]->getOwnSpecialPowerUsedStatus()) {
		isDieThrowAllowed = true;
		cout<< playerVector[playerNum]->getPosIndex() << endl;
	}
	killEnemyWrapper(playerVector[playerNum]->getPlayerColour(),
			playerVector[playerNum]->getPoint());
}

void GameManager::askToMoveWrapper(int playerColour, int playerNum,
		bool movement) {
	if (playerColour == 1)
		askToMoveToken(playerNum, vectorRedPlayer, movement);
	if (playerColour == 2)
		askToMoveToken(playerNum, vectorBluePlayer, movement);
	if (playerColour == 3)
		askToMoveToken(playerNum, vectorYellowPlayer, movement);
	if (playerColour == 4)
		askToMoveToken(playerNum, vectorGreenPlayer, movement);
}

void GameManager::killEnemyWrapper(int playerColor, Point myNewPoint) {
	if (playerColor == 1)
		killEnemy(myNewPoint, vectorRedPlayer, vectorBluePlayer,
				vectorGreenPlayer, vectorYellowPlayer);
	if (playerColor == 2)
		killEnemy(myNewPoint, vectorBluePlayer, vectorRedPlayer,
				vectorGreenPlayer, vectorYellowPlayer);
	if (playerColor == 3)
		killEnemy(myNewPoint, vectorYellowPlayer, vectorBluePlayer,
				vectorRedPlayer, vectorGreenPlayer);
	if (playerColor == 4)
		killEnemy(myNewPoint, vectorGreenPlayer, vectorBluePlayer,
				vectorGreenPlayer, vectorYellowPlayer);
}
void GameManager::killEnemy(Point myNewPoint, std::vector<GoTPlayer *> playerVector,
		std::vector<GoTPlayer *> enemyVector1, std::vector<GoTPlayer *> enemyVector2,
		std::vector<GoTPlayer *> enemyVector3) {
	auto arrayPlayers = { enemyVector1, enemyVector1, enemyVector3 };
	for (auto &players : arrayPlayers) {
		int i = 0;
		for (auto &token : players) {
			if (token->getPoint() == myNewPoint && !(token->getPosIndex() == 1))
				token->incrPosIndex(-58, false);
			i++;
		}
	}
}
void GameManager::housePower(int house) {
	if (house == 1) {
		if (vectorRedPlayer[0]->getPosIndex() == 0) {
			vectorRedPlayer[0]->incrPosIndex(1, true);
		} else if (vectorRedPlayer[1]->getPosIndex() == 0) {
			vectorRedPlayer[1]->incrPosIndex(1, true);
		} else if (vectorRedPlayer[2]->getPosIndex() == 0) {
			vectorRedPlayer[2]->incrPosIndex(1, true);
		} else if (vectorRedPlayer[3]->getPosIndex() == 0) {
			vectorRedPlayer[3]->incrPosIndex(1, true);
		}
		UI.showPopupMessage("House Power Used", "One token resurrected");
	} else if (house == 2) {

		vectorBluePlayer[0]->incrPosIndex(2, false);
		vectorBluePlayer[1]->incrPosIndex(2, false);
		vectorBluePlayer[2]->incrPosIndex(2, false);
		vectorBluePlayer[3]->incrPosIndex(2, false);
		UI.showPopupMessage("House Power Used",
				"Incremented all active tokens by 2 places");
	} else if (house == 3) {
		std::string body;
		srand(rand() ^ time(NULL));
		int houseKill = rand() % 2;
		int playerKill = rand() % 2;
		if (playerKill <= 1) {
			body = "Player " + std::to_string(houseKill + 1) + ", Token "
					+ std::to_string(playerKill + 1) + " Sent to home";
		} else if (playerKill == 2) {
			body = "Player 4, Token " + std::to_string(playerKill + 1)
					+ " Sent to home";
		}
		if (houseKill == 0) {
			vectorRedPlayer[playerKill]->incrPosIndex(-58, false);
		} else if (houseKill == 1) {
			vectorBluePlayer[playerKill]->incrPosIndex(-58, false);
		} else if (houseKill == 2) {
			vectorGreenPlayer[playerKill]->incrPosIndex(-58, false);
		}
		UI.showPopupMessage("Special Power Used", body.c_str());

	} else if (house == 4) {

		auto arrayPlayers = { vectorRedPlayer, vectorBluePlayer,
				vectorYellowPlayer };
		for (auto &players : arrayPlayers) {
			int i = 0;
			for (auto &token : players) {
				token->incrPosIndex(-2, false);
				i++;
			}
		}
		UI.showPopupMessage("House Power Used",
				"All other active token taken back by two places");
	}
}

void GameManager::setAllHousePowers(std::vector<GoTPlayer *> &playerVector,
		bool powerStatus) {
	playerVector[0]->setHouseSpecialPowerUsedStatus(powerStatus);
	playerVector[1]->setHouseSpecialPowerUsedStatus(powerStatus);
	playerVector[2]->setHouseSpecialPowerUsedStatus(powerStatus);
	playerVector[3]->setHouseSpecialPowerUsedStatus(powerStatus);
}

bool GameManager::NorMyAllPlayers(std::vector<GoTPlayer *> &playerVector) {
	return !(playerVector[0]->isPlayingInGame()
			|| playerVector[1]->isPlayingInGame()
			|| playerVector[2]->isPlayingInGame()
			|| playerVector[3]->isPlayingInGame());
}

const int GameManager::performOnBoarding() {

	UI.renderNewTexture(_ONBOARDING);

	const SDL_MessageBoxButtonData buttons[] = { { 0, 0, "GoT" }, { 0, 1,
			"Traditional" }, };
	const SDL_MessageBoxData messageboxdata = { SDL_MESSAGEBOX_INFORMATION,
	NULL, "Welcome!!!", "Select game type", SDL_arraysize(buttons), buttons,
	NULL };

	int buttonid;
	if (SDL_ShowMessageBox(&messageboxdata, &buttonid) < 0) {
		cout<< "[GAME_MANAGER] error displaying message box" << endl;
		return 1;
	}
	if (buttonid == -1) {
		cout<< "[GAME_MANAGER] no selection made. asking again"
		<< endl;
		return 2;
	} else {
		cout << "[GAME_MANAGER] selection was " << buttonid << endl;
		if (buttonid == 1) {
			setGameType(_TRADITIONAL);
		} else if (buttonid == 0) {
			setGameType(_GOT);
		}
		return 0;
	}
}

GameManager::~GameManager() {
	// TODO Auto-generated destructor stub
}
